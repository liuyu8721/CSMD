# All rights reserved by Liuyu
# Author: Liuyu
# Usage:
# export CSMD_HOME=/public/users/liuyu/csmd
# export PATH=$PATH:${CSMD_HOME}
#!/bin/sh
CSMD_VERSION=0.05
source ${CSMD_HOME}/configs.sh
source ${CSMD_HOME}/downloads.sh

#args to be injected
input_path=''
output_path=''
# library path
db_path=''

outdir=''

#thread
thread_number=1
ref_name=''
r1=''
r2=''

sam=''
report=''
refseq=''
nt=''
taxonomy=''
seqdir=''
seqlist=''
content=''
cutoff=25

function csmd_help () {
  echo ""
  echo "Program: csmd (A computational pipeline for high-resolution profiling of low abundance microbiome in clinical samples using whole genome shotgun sequencing)"
  echo "Version: ${CSMD_VERSION}"
  echo ""
  echo "Usage: csmd <command> [options]"
  echo ""
  echo "Commands:"
  echo ""
  echo "  Database preparation"
  echo "  --download-library  Download csmd needed databases"
  echo "  --build-library     Index csmd needed databases"
  echo "  --download-taxonomy Download taxonomy files from NCBI"
  echo "  --build-taxonomy    Re-organize the taxonomy tree"
  echo ""
  echo "  Computational pipeline"
  echo "  --cs                Perform a sensitive and specific human-derived sequence subtraction"
  echo "  --md                Provide a painstaking microbiome discovery procedure"
  echo "  --pf                Perform an accurate species-level classification"
  exit
}

function download_help () {
  echo ""
  echo "About: This command download csmd needed databases"
  echo "Usage: csmd --download-library LIBNAME --db DBPATH"
  echo ""
  echo "Options:"
  echo ""
  echo "    --download-library LIBNAME"
  echo "        Permissible LIBNAME includes “hg38”, “AHG”, “EHG”, “nt”, or “RefSeqBac”."
  echo "    --db DBPATH"
  echo "        The save path for the download."
  exit
}

function download_taxonomy_help () {
  echo ""
  echo "About: This command downloads taxonomy files from NCBI"
  echo "Usage: csmd --download-taxonomy --db DBPATH"
  echo ""
  echo "Options:"
  echo ""
  echo "    --download-taxonomy"
  echo "        No argument is needed."
  echo "    --db DBPATH"
  echo "        The save path for the taxonomy files."
  exit
}

function build_library_help () {
  echo ""
  echo "About: This command generates csmd needed indexed databases, BWA index for hg38 and AHG databases, Bowtie2 index for EHG and RefSeq representative species databases, and blast index for nt and representative genomes databases. To obtain RepBase, go to http://www.girinst.org."
  echo "Usage: csmd --build-library LIBNAME --db DBPATH"
  echo ""
  echo "Options:"
  echo ""
  echo "    --build-library LIBNAME"
  echo "        Permissible LIBNAME includes “hg38”, “AHG”, “EHG”, “nt”, or “RefSeqBac”."
  echo "    --db DBPATH"
  echo "        The save path for the indexed database."
  exit
}

function build_taxonomy_help () {
  echo ""
  echo "About: This command re-organizes taxonomy files"
  echo "Usage: csmd --build-taxonomy --db DBPATH"
  echo ""
  echo "Options:"
  echo ""
  echo "    --build-taxonomy"
  echo "        No argument is needed."
  echo "    --db DBPATH"
  echo "        The save path for the re-organized taxonomy tree."
  exit
}

function cs_help () {
  echo ""
  echo "About: A four-phase human-derived sequence subtraction"
  echo "Usage:"
  echo "    csmd --cs hg38Removal --ref REFNAME --thread NUMBER --r1 SAMPLE.R1.fastq --r2 SAMPLE.R2.fastq --output SAMPLE.hg38removal.fastq"
  echo "    csmd --cs ahgRemoval --ref REFNAME --thread NUMBER --input SAMPLE.hg38removal.fastq --output SAMPLE.hg38removal.AHGremoval.fastq"
  echo "    csmd --cs lcrRemoval --ref REFNAME --thread NUMBER --input SAMPLE.hg38removal.AHGremoval.fastq --output SAMPLE.hg38removal.AHGremoval.LCRremoval.fasta"
  echo "    csmd --cs ehgRemoval --ref REFNAME --thread NUMBER --input SAMPLE.hg38removal.AHGremoval.LCRremoval.fasta --output SAMPLE.hg38Removal.AHGRemoval.LCRRemoval.EHGRemoval.fasta"
  echo ""
  echo "Options:"
  echo ""
  echo "    --cs STEPNAME"
  echo "        The cs step detail name. Permissible STEPNAME includes “hg38Removal”, “ahgRemoval”, “lcrRemoval”, or “ehgRemoval”."
  echo "    --ref REFNAME"
  echo "        The reference name with the path used for human-derived reads alignment and removal. "
  echo "    --thread NUMBER"
  echo "        The number of threads (CPUs) to use."
  echo "    --r1, --r2, --input"
  echo "        The input file with the path. For hg38Removal, the input should be paired-end reads using the parameters “--r1” and “--r2”, but for others, using the parameter “--input“. In the phase of hg38Removal, paired-end reads will be combined into single-end data after finishing hg38 reads alignment and removal. The format of the input files is illustrated as the examples."
  echo "    --output"
  echo "        The output file with the path. The format of the output files is illustrated as the examples."
  exit
}

function md_help () {
  echo ""
  echo "About: A three-phase microbiome discovery procedure"
  echo "Usage:"
  echo "    csmd --md finding –-ref REFNAME --input pooled_nonHuman.fasta --outdir OUTPATH"
  echo "    csmd --md correction --sam csmd_finding.sam --report csmd_finding_report.tsv -–cutoff 25 --thread NUMBER --nt NTNAME --refseq RSNAME --output DBLIST"
  echo "    csmd --md refinement --seqdir SEQPATH --seqlist DBLIST --input pooled_nonHuman.fasta --outdir OUTPATH"
  echo ""
  echo "Options:"
  echo ""
  echo "    --md STEPNAME"
  echo "        The md step detail name. Permissible STEPNAME includes “finding”, “correction”, or “refinement”."
  echo "    --ref REFNAME"
  echo "        The reference name with the path used for the initial alignment to the redundant microbial database containing all the organisms or the nearest neighbors likely to be present in the sample. "
  echo "    --thread NUMBER"
  echo "        The number of threads (CPUs) to use."
  echo "    --nt NTNAME, --refseq RSNAME"
  echo "        The nt or RefSeq reference name with the path used for blast analysis."
  echo "    --cutoff NUMBER"
  echo "        The minimum number of mapping reads used for single microbial species discovery."
  echo "    --cutoff NUMBER"
  echo "        The minimum number of mapping reads used for single microbial species discovery."
  echo "    --sam FILENAME, --report FILENAME"
  echo "        The input or output sam file in SAM format and report file in pathoscope tsv format. The path should be provided."
  echo "    --outdir OUTPATH"
  echo "        The output directory and the default output file(s) will be generated. NOTE: If --outdir is provided in discovery step, --sam and --report are not used. "
  echo "    --output DBLIST, --seqlist DBLIST"
  echo "        The updated microbial genome list which are likely present in the samples."
  echo "    --seqdir SEQPATH"
  echo "        The RefSeq microbial genome directory containing all needed updated microbial genome list which are likely present in the samples."
  exit
}

function pf_help () {
  echo ""
  echo "About: Per-sample microbiome profiling"
  echo "Usage:"
  echo "    csmd --pf dbsetup --seqdir SEQPATH --seqlist DBUPDATE --outdir OUTPATH"
  echo "    csmd --pf profile --ref REFNAME --thread NUMBER"
  echo ""
  echo "Options:"
  echo ""
  echo "    --input FILENAME"
  echo "    --pf STEPNAME"
  echo "        The profile step detail name. Permissible STEPNAME includes “dbsetdup” for the indexed CSMD database and “profile” for single sample microbiome profiling."
  echo "    --seqdir SEQPATH"
  echo "        The RefSeq microbial genome directory containing all needed updated microbial genome list which are likely present in the samples."
  echo "    --seqlist DBLIST"
  echo "        The updated microbial genome list which are likely present in the samples."
  echo "    --sam FILENAME"
  echo "        Reads alignment detail in SAM format."
  echo "    --report FILENAME"
  echo "        The pathoscope style report in tsv format"
  exit
}

function parse_args () {
  while [ "$1" != "" ];
  do
    case $1 in
      --input )
        shift
        input_path=$1
        ;;

      --output )
        shift
        output_path=$1
        ;;

      --outdir )
        shift
        outdir=$1
        ;;

      --db )
        shift
        db_path=$1
        ;;

      --ref )
        shift
        ref_name=$1
        ;;

      --thread )
        shift
        thread_number=$1
        ;;

      --r1 )
        shift
        r1=$1
        ;;

      --r2 )
        shift
        r2=$1
        ;;

      --sam )
        shift
        sam=$1
        ;;

      --report )
        shift
        report=$1
        ;;

      --nt )
        shift
        nt=$1
        ;;

      --taxonomy )
        shift
        taxonomy=$1
        ;;

      --refseq )
        shift
        refseq=$1
        ;;

      --seqdir )
        shift
        seqdir=$1
        ;;

      --seqlist )
        shift
        seqlist=$1
        ;;

      --content )
        shift
        content=$1
        ;;

      --cutoff )
        shift
        cutoff=$1
        ;;

      * )
        echo "invalid argument: $1"
        exit
        ;;
    esac
    shift
  done
}

# csmd --download-library hg38 --db /data/dna
# download fa.gz into ${db_path}/hg38/SEQ and gunzip into
# that directory and cat all into ${db_path}
download_hg38 () {
  parse_args $@
  do_download_hg38 ${db_path}
}

# csmd --build-library hg38 --db /data/dna
build_hg38 () {
  parse_args $@
  hg_38_dir=${db_path}/hg38
  cd ${hg_38_dir}
  echo "building hg38_ucsc.fasta index"
  bwa index hg38_ucsc.fasta
}

# csmd --download-library AHG --db /data/dna
download_AHG () {
  parse_args $@
  do_download_AHG ${db_path}
}

# csmd --build-library AHG --db /data/dna
build_AHG () {
  parse_args $@
  ahg_dir=${db_path}/AHG
  cd ${ahg_dir}
  echo "building ahg.fasta index"
  bwa index ahg.fasta
}

# csmd --download-library EHG --db /data/dna
download_EHG () {
  parse_args $@
  do_download_EHG ${db_path}
}

# csmd --build-library EHG --db /data/dna/EHG
build_EHG () {
  parse_args $@
  ehg_dir=${db_path}/EHG
  cd ${ehg_dir}
  echo "building ehg.fasta index"
  # Edited by Liu
  bowtie2-build ehg.fasta ehg.fasta
}

# csmd --download-library nt --db /data/dna
download_nt () {
  parse_args $@
  do_download_nt ${db_path}
}

# csmd --download-library RefSeqBac --db /data/dna
download_RefSeqBac () {
  parse_args $@
  do_download_RefSeqBac ${db_path}
}

# csmd --build-library RefSeqBac --db /data/dna
build_RefSeqBac () {
  parse_args $@
  if [ -d "${db_path}" ]
  then
    bacteria_dir=${db_path}/RefSeq/bacteria
    mkdir -p ${bacteria_dir}
    sh ${CSMD_HOME}/MD_P1.sh ${bacteria_dir}
  else
   echo "please provide db path and make sure its path exist"
  fi
}

# csmd --build-library nt --db /data/nt
build_nt () {
  parse_args $@
  nt_dir=${db_path}/nt
  nt_download_dir=${db_path}/nt/SEQ
  cd ${nt_download_dir}
  echo "building nt index"
  makeblastdb -in nt -dbtype nucl -out ${nt_dir}/nt
}

download_taxonomy () {
  case $1 in
    -h | --help )
      download_taxonomy_help
      exit
      ;;

    * )
      execute_download_taxonomy $@
      ;;

  esac
}

# csmd --download-taxonomy --db /data/dna
execute_download_taxonomy () {
  parse_args $@
  do_download_taxonomy ${db_path}
}

build_taxonomy () {
  case $1 in
    -h | --help )
      build_taxonomy_help
      exit
      ;;

    * )
      do_build_taxonomy $@
      ;;

  esac
}

# csmd --build-taxonomy --db /data/dna/taxonomy
do_build_taxonomy () {
  parse_args $@
  # Edited by Liu
  taxonomy_dir=${db_path}/taxonomy/taxdump
  cd ${taxonomy_dir}
  echo "building taxonomy with Rscript"
  Rscript ${CSMD_HOME}/taxTree.R ${taxonomy_dir}
}


download () {
  case $1 in
    hg38 )
      shift
      download_hg38 $@
      ;;

    AHG )
      shift
      download_AHG $@
      ;;

    EHG )
      shift
      download_EHG $@
      ;;
    nt )
      shift
      download_nt $@
      ;;

    RefSeqBac )
      shift
      download_RefSeqBac $@
      ;;

    -h | --help )
      download_help
      exit
      ;;

    * )
      echo "Invalid command: $1"
      exit
      ;;

  esac
}

build () {
  case $1 in
    hg38 )
      shift
      build_hg38 $@
      ;;

    AHG )
      shift
      build_AHG $@
      ;;

    EHG )
      shift
      build_EHG $@
      ;;

    RefSeqBac )
      shift
      build_RefSeqBac $@
      ;;

    nt )
      shift
      build_nt $@
      ;;

    -h | --help )
      build_library_help
      exit
      ;;

    * )
      echo "Invalid command: $1"
      exit
      ;;

  esac
}


# csmd --cs hg38Removal --ref REFNAME --thread NUMBER \
# --r1 SAMPLE.R1.fastq --r2 SAMPLE.R2.fastq --output SAMPLE.hg38removal.fastq
execute_cs_hg38Removal () {
  parse_args $@
  echo "to call CS_P1.sh"
  sh ${CSMD_HOME}/CS_P1.sh ${ref_name} ${thread_number} ${r1} ${r2} ${output_path}
}

# csmd --cs ahgRemoval --ref REFNAME --thread NUMBER \
# --input SAMPLE.hg38removal.fastq --output SAMPLE.hg38removal.AHGremoval.fastq
execute_cs_ahgRemoval () {
  parse_args $@
  echo "to call CS_P2.sh"
  sh ${CSMD_HOME}/CS_P2.sh ${ref_name} ${thread_number} ${input_path} ${output_path}
}

# csmd --cs lcrRemoval --ref REFNAME --thread NUMBER
# --input SAMPLE.hg38removal.AHGremoval.fastq \
# --output SAMPLE.hg38removal.AHGremoval.LCRremoval.fasta
execute_cs_lcrRemoval () {
  parse_args $@
  echo "to call CS_P3.sh"
  sh ${CSMD_HOME}/CS_P3.sh ${ref_name} ${thread_number} ${input_path} ${output_path}
}

# csmd --cs ehgRemoval --ref REFNAME --thread NUMBER \
# --input SAMPLE.hg38removal.AHGremoval.LCRremoval.fasta \
# --output SAMPLE.hg38Removal.AHGRemoval.LCRRemoval.EHGRemoval.fasta
execute_cs_ehgRemoval () {
  parse_args $@
  echo "to call CS_P4.sh"
  sh ${CSMD_HOME}/CS_P4.sh ${ref_name} ${thread_number} ${input_path} ${output_path}
}

execute_cs_step () {
  case $1 in
    hg38Removal )
      shift
      execute_cs_hg38Removal $@
      ;;

    ahgRemoval )
      shift
      execute_cs_ahgRemoval $@
      ;;

    lcrRemoval )
      shift
      execute_cs_lcrRemoval $@
      ;;

    ehgRemoval )
      shift
      execute_cs_ehgRemoval $@
      ;;

    -h | --help )
      cs_help
      exit
      ;;

    * )
      echo "Invalid command: $1"
      exit
      ;;

  esac
}

execute_md_step () {
  case $1 in
    finding )
      shift
      execute_md_finding $@
      ;;

    correction )
      shift
      execute_md_correction $@
      ;;

    refinement )
      shift
      execute_md_refinement $@
      ;;

    -h | --help )
      md_help
      exit
      ;;

    * )
      echo "Invalid command: $1"
      exit
      ;;

  esac
}

# csmd --md finding –ref REFNAME --thread NUMBER \
# --input pooled_nonHuman.fasta \
# --outdir DBLIST
execute_md_finding () {
  parse_args $@
  echo "to call MD_P2.sh"
  sh ${CSMD_HOME}/MD_P2.sh ${ref_name} ${thread_number} ${input_path} ${outdir}
}

# csmd --md correction --cutoff THRESHOLD –thread NUMBER \
# --sam pooled_nonHuman.sam --report pooled_nonHuman.report \
# --nt NTNAME --refseq RSNAME --taxonomy TAXONOMY --outdir DBLIST
execute_md_correction () {
  parse_args $@
  echo "to call MD_P3.sh"
  echo "cutoff:${cutoff}"
  echo "thread_number:${thread_number}"
  echo "sam:${sam}"
  echo "report:${report}"
  echo "nt:${nt}"
  echo "refseq:${refseq}"
  echo "taxonomy:${taxonomy}"
  echo "output_path:${output_path}"
  sh ${CSMD_HOME}/MD_P3.sh ${cutoff} ${thread_number} ${sam} ${report} ${nt} ${refseq} ${taxonomy} ${outdir}
}

# csmd --md refinement --seqdir SEQPATH --seqlist SEQLIST \
# --input pooled_nonHuman.fasta --outdir DBUPDATE
execute_md_refinement () {
  parse_args $@
  echo "to call MD_P4.sh"
  sh ${CSMD_HOME}/MD_P4.sh ${thread_number} ${seqdir} ${seqlist} ${input_path} ${outdir}
}

execute_pf_step () {
  case $1 in
    dbsetup )
      shift
      execute_pf_dbsetup $@
      ;;

    profile )
      shift
      execute_pf_profile $@
      ;;

    -h | --help )
      pf_help
      exit
      ;;

    * )
      echo "Invalid command: $1"
      exit
      ;;

  esac
}

# csmd --pf dbsetup --seqdir SEQPATH --seqlist DBUPDATE --outdir OUTPATH
execute_pf_dbsetup () {
  parse_args $@
  echo "to call PF_P1.sh"
  sh ${CSMD_HOME}/PF_P1.sh ${seqdir} ${seqlist} ${outdir}
}

# csmd --pf profile --ref REFNAME --thread NUMBER \
# --input SAMPLE.hg38Removal.AHGRemoval.LCRRemoval.EHGRemoval.fasta \
# --sam SAMPLE.csmd.sam \
# --report SAMPLE.csmd.profile.report
execute_pf_profile () {
  parse_args $@
  echo "to call PF_P2.sh"
  sh ${CSMD_HOME}/PF_P2.sh ${ref_name} ${thread_number} ${input_path} ${sam} ${report}
}

main () {
  case $1 in
    -v | --version )
      echo "Version: ${CSMD_VERSION}"
      ;;

    -h | --help )
      csmd_help
      exit
      ;;

    --download-library )
      shift
      download $@
      ;;

    --build-library )
      shift
      build $@
      ;;  

    --download-taxonomy )
      shift
      download_taxonomy $@
      ;;

    --build-taxonomy )
      shift
      build_taxonomy $@
      ;;  

    --cs )
      shift
      execute_cs_step $@
      ;;

    --md )
      shift
      execute_md_step $@
      ;;

    --pf )
      shift
      execute_pf_step $@
      ;;

    * )
      csmd_help
      exit
      ;;
  esac
}

root_dir=$(cd ../ && pwd)
main $@
cd ${root_dir}

